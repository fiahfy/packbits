import { encode, decode } from '../src'

/* eslint-disable prettier/prettier */
const encodeMaps = [
  [
    [0xAA, 0xAA, 0xAA, 0xBB, 0xCC, 0xDD, 0xAA, 0xAA, 0xAA, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA],
    [0xFE, 0xAA, 0x02, 0xBB, 0xCC, 0xDD, 0xFD, 0xAA, 0x03, 0xBB, 0xCC, 0xDD, 0xEE, 0xF7, 0xAA]
  ],
  [
    [0xAA],
    [0x00, 0xAA]
  ],
  [
    [0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA],
    [0xF9, 0xAA]
  ],
  [
    [0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xBB],
    [0xF9, 0xAA, 0x00, 0xBB]
  ],
  [
    [0xA0, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8],
    [0x07, 0xA0, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8]
  ],
  [
    [0xA0, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA8],
    [0x06, 0xA0, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xFF, 0xA8]
  ]
]

const icnsEncodeMaps = [
  [
    [0xAA, 0xBB, 0xBB, 0xCC, 0xCC, 0xCC, 0xDD, 0xDD, 0xDD, 0xDD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF],
    [0x02, 0xAA, 0xBB, 0xBB, 0x80, 0xCC, 0x81, 0xDD, 0x82, 0xFF]
  ],
  [
    [0xAA, 0xAA],
    [0x01, 0xAA, 0xAA]
  ]
]
/* eslint-enable prettier/prettier */

describe('encode', () => {
  test('should work', () => {
    for (const [src, enc] of encodeMaps) {
      const buf = Buffer.from(src)
      const encoded = encode(buf)
      const arr = Array.from(encoded)
      expect(arr).toEqual(enc)
    }
  })

  test('should work for ICNS', () => {
    for (const [src, enc] of icnsEncodeMaps) {
      const buf = Buffer.from(src)
      const encoded = encode(buf, { format: 'icns' })
      const arr = Array.from(encoded)
      expect(arr).toEqual(enc)
    }
  })
})

describe('decode', () => {
  test('should work', () => {
    for (const [src, enc] of encodeMaps) {
      const buf = Buffer.from(enc)
      const decoded = decode(buf)
      const arr = Array.from(decoded)
      expect(arr).toEqual(src)
    }
  })

  test('should work for ICNS', () => {
    for (const [src, enc] of icnsEncodeMaps) {
      const buf = Buffer.from(enc)
      const decoded = decode(buf, { format: 'icns' })
      const arr = Array.from(decoded)
      expect(arr).toEqual(src)
    }
  })
})
